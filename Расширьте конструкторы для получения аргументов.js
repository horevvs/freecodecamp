
// Расширьте конструкторы для получения аргументов
// Конструкторы Birdи Dogиз последнего задания сработали хорошо. Однако обратите внимание, что все Birdsобъекты, созданные с помощью Birdконструктора, автоматически называются «Альберт», имеют синий цвет и две ножки. Что, если вам нужны птицы с разными значениями имени и цвета? Можно изменить свойства каждой птицы вручную, но это потребует много работы:

// let swan = new Bird();
// swan.name = "Carlos";
// swan.color = "white";
// Предположим, вы пишете программу для отслеживания сотен или даже тысяч различных птиц в вольере. Создание всех птиц, а затем изменение свойств на разные значения для каждой заняло бы много времени. Чтобы упростить создание различных Birdобъектов, вы можете спроектировать конструктор Bird так, чтобы он принимал параметры:

// function Bird(name, color) {
//   this.name = name;
//   this.color = color;
//   this.numLegs = 2;
// }
// Затем передайте значения в качестве аргументов, чтобы определить каждую уникальную птицу в Birdконструктор: let cardinal = new Bird("Bruce", "red");Это дает новый экземпляр Birdwith nameи colorсвойства, установленные на Bruceи red, соответственно. Для свойства numLegsпо-прежнему установлено значение 2. Оно cardinalимеет следующие свойства:

// cardinal.name
// cardinal.color
// cardinal.numLegs
// Конструктор более гибкий. Теперь можно определить свойства для каждого объекта Birdво время его создания, и это одна из причин, почему конструкторы JavaScript так полезны. Они группируют объекты на основе общих характеристик и поведения и определяют схему, автоматизирующую их создание.

// Создайте еще один Dogконструктор. На этот раз настройте его на прием параметров nameи colorи зафиксируйте свойство numLegsна 4. Затем создайте новое, Dogсохраненное в переменной terrier. Передайте ему две строки в качестве аргументов для свойств nameи color.

function Dog(name, color) {
    this.name = name;
    this.color = color;
    this.numLegs = 4;
  }
  
  let terrier= new Dog('sharik', 'black')